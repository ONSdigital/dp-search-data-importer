// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"github.com/ONSdigital/dp-search-data-importer/esclient"
	"sync"
)

var (
	lockElasticSearcherMockSearch         sync.RWMutex
	lockElasticSearcherMockSubmitBulkToES sync.RWMutex
)

// Ensure, that ElasticSearcherMock does implement ElasticSearcher.
// If this is not the case, regenerate this file with moq.
var _ esclient.ElasticSearcher = &ElasticSearcherMock{}

// ElasticSearcherMock is a mock implementation of esclient.ElasticSearcher.
//
//     func TestSomethingThatUsesElasticSearcher(t *testing.T) {
//
//         // make and configure a mocked esclient.ElasticSearcher
//         mockedElasticSearcher := &ElasticSearcherMock{
//             SearchFunc: func(ctx context.Context, index string, docType string, request []byte) ([]byte, error) {
// 	               panic("mock out the Search method")
//             },
//             SubmitBulkToESFunc: func(ctx context.Context, bulk []byte, titles []byte, esDestURL string, esDestIndex string) ([]byte, error) {
// 	               panic("mock out the SubmitBulkToES method")
//             },
//         }
//
//         // use mockedElasticSearcher in code that requires esclient.ElasticSearcher
//         // and then make assertions.
//
//     }
type ElasticSearcherMock struct {
	// SearchFunc mocks the Search method.
	SearchFunc func(ctx context.Context, index string, docType string, request []byte) ([]byte, error)

	// SubmitBulkToESFunc mocks the SubmitBulkToES method.
	SubmitBulkToESFunc func(ctx context.Context, bulk []byte, titles []byte, esDestURL string, esDestIndex string) ([]byte, error)

	// calls tracks calls to the methods.
	calls struct {
		// Search holds details about calls to the Search method.
		Search []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Index is the index argument value.
			Index string
			// DocType is the docType argument value.
			DocType string
			// Request is the request argument value.
			Request []byte
		}
		// SubmitBulkToES holds details about calls to the SubmitBulkToES method.
		SubmitBulkToES []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Bulk is the bulk argument value.
			Bulk []byte
			// Titles is the titles argument value.
			Titles []byte
			// EsDestURL is the esDestURL argument value.
			EsDestURL string
			// EsDestIndex is the esDestIndex argument value.
			EsDestIndex string
		}
	}
}

// Search calls SearchFunc.
func (mock *ElasticSearcherMock) Search(ctx context.Context, index string, docType string, request []byte) ([]byte, error) {
	if mock.SearchFunc == nil {
		panic("ElasticSearcherMock.SearchFunc: method is nil but ElasticSearcher.Search was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Index   string
		DocType string
		Request []byte
	}{
		Ctx:     ctx,
		Index:   index,
		DocType: docType,
		Request: request,
	}
	lockElasticSearcherMockSearch.Lock()
	mock.calls.Search = append(mock.calls.Search, callInfo)
	lockElasticSearcherMockSearch.Unlock()
	return mock.SearchFunc(ctx, index, docType, request)
}

// SearchCalls gets all the calls that were made to Search.
// Check the length with:
//     len(mockedElasticSearcher.SearchCalls())
func (mock *ElasticSearcherMock) SearchCalls() []struct {
	Ctx     context.Context
	Index   string
	DocType string
	Request []byte
} {
	var calls []struct {
		Ctx     context.Context
		Index   string
		DocType string
		Request []byte
	}
	lockElasticSearcherMockSearch.RLock()
	calls = mock.calls.Search
	lockElasticSearcherMockSearch.RUnlock()
	return calls
}

// SubmitBulkToES calls SubmitBulkToESFunc.
func (mock *ElasticSearcherMock) SubmitBulkToES(ctx context.Context, bulk []byte, titles []byte, esDestURL string, esDestIndex string) ([]byte, error) {
	if mock.SubmitBulkToESFunc == nil {
		panic("ElasticSearcherMock.SubmitBulkToESFunc: method is nil but ElasticSearcher.SubmitBulkToES was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Bulk        []byte
		Titles      []byte
		EsDestURL   string
		EsDestIndex string
	}{
		Ctx:         ctx,
		Bulk:        bulk,
		Titles:      titles,
		EsDestURL:   esDestURL,
		EsDestIndex: esDestIndex,
	}
	lockElasticSearcherMockSubmitBulkToES.Lock()
	mock.calls.SubmitBulkToES = append(mock.calls.SubmitBulkToES, callInfo)
	lockElasticSearcherMockSubmitBulkToES.Unlock()
	return mock.SubmitBulkToESFunc(ctx, bulk, titles, esDestURL, esDestIndex)
}

// SubmitBulkToESCalls gets all the calls that were made to SubmitBulkToES.
// Check the length with:
//     len(mockedElasticSearcher.SubmitBulkToESCalls())
func (mock *ElasticSearcherMock) SubmitBulkToESCalls() []struct {
	Ctx         context.Context
	Bulk        []byte
	Titles      []byte
	EsDestURL   string
	EsDestIndex string
} {
	var calls []struct {
		Ctx         context.Context
		Bulk        []byte
		Titles      []byte
		EsDestURL   string
		EsDestIndex string
	}
	lockElasticSearcherMockSubmitBulkToES.RLock()
	calls = mock.calls.SubmitBulkToES
	lockElasticSearcherMockSubmitBulkToES.RUnlock()
	return calls
}
